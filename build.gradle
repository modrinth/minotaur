plugins {
    id 'java'
    id "com.gradle.plugin-publish" version "0.13.0"
    id "java-gradle-plugin"
}

version = project_version
group = group
archivesBaseName = archivesBaseName
description = 'Modrinth plugin for publishing builds to the website!'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

dependencies {
    compileOnly gradleApi()
	
    implementation group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.13'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
	
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.7.1'
}

test {
    useJUnitPlatform()
}

gradlePlugin {
    plugins {
        minotaur {
            id = 'com.modrinth.minotaur'
            implementationClass = 'com.modrinth.minotaur.Minotaur'
        }
    }
}

pluginBundle {
    website = 'https://modrinth.com'
    vcsUrl = 'https://github.com/modrinth/minotaur'
    description = 'Modrinth plugin for publishing builds to the website!'
    tags = ['modrinth', 'publish', 'mods', 'minecraft']

    plugins {
        minotaur {
            displayName = 'Minotaur'
        }
    }
}

jar {
    manifest {
        attributes([
                'Timestamp'               : System.currentTimeMillis(),
                'Specification-Title'     : project.archivesBaseName,
                'Specification-Vendor'    : project.vendor,
                'Specification-Version'   : project.version,
                'Implementation-Title'    : project.archivesBaseName,
                'Implementation-Version'  : project.version,
                'Implementation-Vendor'   : project.vendor,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})"
        ])
    }
}

java {
  withSourcesJar()
  withJavadocJar()
}

static String getBuildNumber() {
    return System.getenv("GITHUB_RUN_NUMBER") ?: "0"
}

static boolean isSnapshot() {
    String ref = System.getenv("GITHUB_REF");
    if (ref != null && ref.startsWith("refs/tags/v")) {
        return false
    }
    return true
}